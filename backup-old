#!/usr/bin/bash
### Author: Shezaan Topiwala ###
### This script is called by "run-backup" ###

BACKUP_LOGS=/tmp/backup-logs # Make sure this directory has read, write permissions.
EXCLUDE_FILE="$BACKUP_LOGS/rsync-excludes"
INCLUDE_FILE="$BACKUP_LOGS/rsync-includes"
CLEAN_BACKUP_CONFIG="$BACKUP_LOGS/backup-config-clean"
RSYNC_MAIL="$BACKUP_LOGS/rsync-mail"
DISK_STATUS="$BACKUP_LOGS/disk-report"
RSYNC='rsync -avR --delete --stats'
ALERT=90 # Disk Space Alert Threshold Percentage.
TO="shezaan@physics.ucla.edu"

####### DO NOT EDIT BELOW THIS LINE #######

mkdir -pm 0744 $BACKUP_LOGS

usage() {
    cat << EOF
    NAME
        backup_master - Utility to do remote and local backups .

    SYNOPSIS
        backup_master [-t path_to_target_backup_directory] -c path_to_backup_config_file -l rsync_log [-u backup_username]

    OPTIONS
        -h  help
                Show this message.

        -t  target directory
                Backup everything to this parent directory.

        -c  config file
                Use this configuration file.

        -l  rsync_log
                Output all rsync logs to this file. All previous logs will be over written.
        
        -u backup_username
                Username for remote connections.

    FILE FORMAT
        For the -c option the file must be formatted as such.
            #local/remote:Server/IP:Include_dirs:Exclude_dirs:Retention_time_in_days:optional_overiding_default_backup_directory:optional_overiding_default_user:non_default_user
            
       E.g.
            remote:10.97.102.37:/home,/tmp/test:home/shezaan/junk,home/shezaan/.*home/backup/.*,tmp/test:7
            local:local-test:/export/home/shezaan:BACKUPS:7
EOF
}

while getopts "t:c:l:u:h" options
    do
        case $options in
            t)
                BASE_BACKUP_DIR="$OPTARG" # This is the default if a directory is not specified in the config file.
                ;;
            c)
                BACKUP_CONFIG="$OPTARG"
                ;;
            l)
                RSYNC_LOG="$OPTARG"
                ;;
            u)
                BACKUP_USER="$OPTARG" # This is the default user if a user is not specified in the config file.

                ;;
            h)
                usage
                exit 1
                ;;
            --)
                shift
                break;;
        esac
    done

if [[ $1 == "" ]]; then
    usage
    exit 1
fi

if [[ -z ${BACKUP_CONFIG} || -z ${RSYNC_LOG} ]]; then
    echo "The following are MANDATORY options"
    echo "-c (configuration file) is MANDATORY"
    echo "-l (rsync log) is MANDATORY"
    exit 1
fi

TODAY=`date +%F`
DESTINATION=""
OVERIDE_USER="" # Make sure this user has the keys of the server's backup user

# Parse out the config file.
parse_config() {
    cat $BACKUP_CONFIG | grep -v '^\#' | grep -v '^$' |  awk -F":" '{ print $1":"$2":"$3":"$4":"$5":"$6":"$7 }' > $CLEAN_BACKUP_CONFIG
    while read line
        do
            local LOCATION=`echo $line | awk -F":" '{ print $1 }'` #Specifiy if its "remote" or "local"
            local SERVER=`echo $line | awk -F":" '{ print $2 }'` #Name or IP of remote server or make up a name for local backups. This will be the directory in which all the backups go.
            local INCLUDES=`echo $line | awk -F":" '{ print $3 }' | tr "," "\n" > $INCLUDE_FILE`
            local EXCLUDES=`echo $line | awk -F":" '{ print $4 }' | tr "," "\n" > $EXCLUDE_FILE`
            local RETENTION=`echo $line | awk -F":" '{ print $5 }'`
            local TARGET=`echo $line | awk -F":" '{ print $6 }'`
            local USER=`echo $line | awk -F":" '{ print $7 }'`

            if [[ -z $TARGET && -n $BASE_BACKUP_DIR ]]; then
                echo -e "=== START OF BACKUPS FOR $SERVER ===\n"
                echo "Only default location specified: Priority set to Default $BASE_BACKUP_DIR"
                DESTINATION=$BASE_BACKUP_DIR
            fi

            if [[ -n $TARGET && -z $BASE_BACKUP_DIR ]]; then
                echo -e "=== START OF BACKUPS FOR $SERVER ===\n"
                echo "Only target location specified: Priority set to Target $TARGET"
                DESTINATION=$TARGET
            fi

            if [[ -n $TARGET && -n $BASE_BACKUP_DIR ]]; then
                echo -e "=== START OF BACKUPS FOR $SERVER ===\n"
                echo "Both locations specified: Priority set to Target $TARGET"
                DESTINATION=$TARGET
            fi

            if [[ -z $TARGET && -z $BASE_BACKUP_DIR ]]; then
                echo -e "=== START OF BACKUPS FOR $SERVER ===\n"
                echo "You have neither provided a default directory as specified by the -t flag, nor have you specified a backup directory as specified by the 6th column in your config file."
            fi

            if [[ -z $USER && -n $BACKUP_USER ]]; then
                echo "Only default user specified: Priority to Default user $BACKUP_USER"
                OVERIDE_USER=$BACKUP_USER
            fi

            if [[ -n $USER && -z $BACKUP_USER ]]; then
                echo "Only overiding user specified: Priority to use Overide user $USER"
                OVERIDE_USER=$USER
            fi

            if [[ -n $USER && -n $BACKUP_USER ]]; then
                echo "Both users specified: Priority to use Overide user $USER"
                OVERIDE_USER=$USER
            fi
if [[ -z $USER && -z $BACKUP_USER ]]; then
                echo "You have neither provided a default user as specified by the -u flag, nor have you specified an overiding user as specified by the 7th column in your config file."
            fi

            disk_space_check
            delete_old $RETENTION $SERVER
            if [ "$LOCATION" == "remote" ] ; then
                rsync_connect_remote $SERVER
            else
                rsync_local $SERVER
            fi
            copy_to_today $SERVER
            echo -e "=== END OF BACKUPS FOR $SERVER ===\n"
        done < $CLEAN_BACKUP_CONFIG
}

### Deletion happens on the same server.###
delete_old() {
    # First count number of directories.
    local server=$2
    local directory="$DESTINATION/$server"
    touch "$directory/PLEASE DO NOT ADD ANYTHING IN THIS DIRECTORY"
    local count=0
    declare -a filestack
    for stuff in `ls -1 $directory`; do
        local yyyy=`echo $stuff | cut -d '-' -f1`
        local yyyy_len=`echo ${#yyyy}`
        isNumber $yyyy
        local yyyy_result=$myresult

        local mm=`echo $stuff | cut -d '-' -f2`
        local mm_len=`echo ${#mm}`
        isNumber $mm
        local mm_result=$myresult

        local dd=`echo $stuff | cut -d '-' -f3`
        local dd_len=`echo ${#dd}`
        isNumber $dd
        local dd_result=$myresult

        if [[ $yyyy_result -eq 0 || $mm_result -eq 0 || $dd_result -eq 0 || -z $yyyy || -z $mm || -z $dd || "$yyyy_len" -ne 4 || "$mm_len" -ne 2 || "$dd_len" -ne 2 ]]; then
            echo -n ""
        else
            count=$[$count+1]
            filestack=( "${filestack[@]}" "$stuff" )
        fi
    done

    #echo "Filestack: ${filestack[@]}"
    #echo "Files: $count"

    local delete_num=""
    if [ "$count" -eq "$1" ]; then
        # First check to see if this is a rerun on the same day
        local stack_length=${#filestack[@]}
        local last_element=${filestack[$stack_length-1]}
        echo "Last element: $last_element"
        if [ $TODAY == $last_element ]; then
            echo "Backup of this name already exists"
            delete_num=0
        else
            delete_num=$[$count-$1+1]
            #echo "Files to delete, count match: $delete_num"
        fi
    elif [[ $count -gt $1 ]]; then
        delete_num=$[$count-$1+1]
        #echo "Files to delete, count greater: $delete_num"
    else
        delete_num=0
        #echo "Nothing to delete: $delete_num"
    fi
	cd $DESTINATION/$server/
        local mystack=`echo ${filestack[@]} | sort | tr " " "\n" | /usr/gnu/bin/head -n$delete_num | /usr/gnu/bin/xargs -d '\n' rm -rf`
}

###Copy from "current" to directory named with todays date i.e. $TODAY###
copy_to_today() {
    local server=$1
    local CURRENT="$DESTINATION/$server/current"
    mkdir -p $DESTINATION/$server/$TODAY
    /usr/gnu/bin/cp -al $CURRENT/* $DESTINATION/$server/$TODAY
}

###Auto connect with SSH keys###
rsync_connect_remote() {
    local server=$1
    local CURRENT="$DESTINATION/$server/current"
    mkdir -p $DESTINATION/$server
    cd $DESTINATION/$server
    local connection="-e ssh $OVERIDE_USER@$server:"
    while read line
        do
            $RSYNC --exclude-from=$EXCLUDE_FILE $connection$line $CURRENT
        done < $INCLUDE_FILE
}

rsync_local() {
    local server=$1
    local CURRENT="$DESTINATION/$server/current"
    mkdir -p $DESTINATION/$server
    cd $DESTINATION/$server
    while read line
        do
            $RSYNC --exclude-from=$EXCLUDE_FILE $line $CURRENT
        done < $INCLUDE_FILE
}

disk_space_check() {
    echo "Destination $DESTINATION"
    /usr/gnu/bin/df -hP $DESTINATION > $DISK_STATUS
    usep=`cat $DISK_STATUS | awk '{ print $5 }' | grep -v ^Use | tr -d %`
    if [ $usep -ge $ALERT ]; then
        echo "Running out of space \"$partition ($usep%)\" on $(hostname) as of $(date)" > $RSYNC_MAIL
        echo "Since threshold for disk space was reached at $ALERT%, backup was aborted." >> $RSYNC_MAIL
        mailx -s "Alert: Almost out of disk space, backups ABORTED - $usep%" $TO < $RSYNC_MAIL
        echo "Running out of space \"$partition ($usep%)\" on $(hostname) as of $(date)"
        echo "Since threshold for disk space was reached at $ALERT%, backup was aborted."
        exit 1
    fi
}

cleanup() {
    rm -rf $RSYNC_LOG $BACKUP_LOGS/*
}

isNumber() {
    if [[ $1 = *[[:digit:]]* ]]; then
        myresult=1
    else
        myresult=0
    fi
}

main() {
        parse_config
        #cleanup
}

main &> $RSYNC_LOG

report() {
    cat $RSYNC_LOG | grep -i "connection" > $RSYNC_MAIL
    cat $RSYNC_LOG | grep -i "fail" >> $RSYNC_MAIL
    cat $RSYNC_LOG | grep -i "permission" >> $RSYNC_MAIL
    cat $RSYNC_LOG | grep -i "error" >> $RSYNC_MAIL
    cat $RSYNC_LOG | grep -i "cannot create link" >> $RSYNC_MAIL
    #echo "Place holder to send out mail, uncomment line below to start mail..."
    mailx -s "Backup Full Log `date +%F` from `hostname`" $TO < $RSYNC_LOG
    local file_size=`stat -c %s $RSYNC_MAIL`
    if [ "$file_size" -gt 0 ]; then
        mailx -s "Backup Error Log `date +%F` from `hostname`" $TO < $RSYNC_MAIL
    fi
}

report
